# Production deployment workflow

name: Production Deployment Workflow

on:
  push:
    branches: [ main ]

  workflow_dispatch:

jobs:

  # Flutter Client Application
  app:
    name: Production Release App
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./

    steps:
      - uses: actions/checkout@v2

      # Setup the flutter environment.
      - name: Setup the flutter environment
        uses: subosito/flutter-action@v1
        with:
          channel: 'stable' # 'dev', 'alpha', default to: 'stable'
          # flutter-version: '1.12.x' # you can also specify exact version of flutter

      # Enable web build
      - name: Enable web build for Flutter
        run: flutter config --enable-web

      # Get flutter dependencies.
      - name: Get Flutter dependencies
        run: flutter pub get

      # Build web 
      - name: Build the web app
        run: flutter build web -t lib/startup/main_prod.dart

      # Deploy on firebase hosting
      - name: Deploy Web App to Firebase Hosting (Production Environment)
        run: firebase deploy
      
      # # Deploy to Heroku
      # - name: Deploy Web App to Heroku (Production Environment)
      #   id: deploy1
      #   continue-on-error: true
      #   uses: gonuit/heroku-docker-deploy@v1.3.2
      #   with:
      #     email: ${{ secrets.HEROKU_EMAIL_ADDRESS }}
      #     heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
      #     heroku_app_name: ${{ secrets.HEROKU_APP_NAME_WEB }}
      #     dockerfile_directory: ./app
      #     dockerfile_name: Dockerfile
      #     docker_options: "--no-cache"
      #     process_type: web

      # # Deploy to Heroku
      # - name: Deploy Web App to Heroku (Production Environment) - Retry 1
      #   if: steps.deploy1.outcome=='failure'
      #   id: retry1
      #   continue-on-error: true
      #   uses: gonuit/heroku-docker-deploy@v1.3.2
      #   with:
      #     email: ${{ secrets.HEROKU_EMAIL_ADDRESS }}
      #     heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
      #     heroku_app_name: ${{ secrets.HEROKU_APP_NAME_WEB }}
      #     dockerfile_directory: ./app
      #     dockerfile_name: Dockerfile
      #     docker_options: "--no-cache"
      #     process_type: web

      #   # Deploy to Heroku
      # - name: Deploy Web App to Heroku (Production Environment) - Retry 2
      #   if: steps.retry1.outcome=='failure'
      #   id: retry2
      #   continue-on-error: true
      #   uses: gonuit/heroku-docker-deploy@v1.3.2
      #   with:
      #     email: ${{ secrets.HEROKU_EMAIL_ADDRESS }}
      #     heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
      #     heroku_app_name: ${{ secrets.HEROKU_APP_NAME_WEB }}
      #     dockerfile_directory: ./app
      #     dockerfile_name: Dockerfile
      #     docker_options: "--no-cache"
      #     process_type: web

      #   # Deploy to Heroku
      # - name: Deploy Web App to Heroku (Production Environment) - Final Retry
      #   if: steps.retry2.outcome=='failure'
      #   uses: gonuit/heroku-docker-deploy@v1.3.2
      #   with:
      #     email: ${{ secrets.HEROKU_EMAIL_ADDRESS }}
      #     heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
      #     heroku_app_name: ${{ secrets.HEROKU_APP_NAME_WEB }}
      #     dockerfile_directory: ./app
      #     dockerfile_name: Dockerfile
      #     docker_options: "--no-cache"
      #     process_type: web

#       # Setup Java environment in order to build the Android app.
#       - name: Setup the Java environment to build the Android app
#         uses: actions/setup-java@v1
#         with:
#           java-version: '12.x'
    
#       # Build android apk 
#       - name: Build the Android app
#         run: flutter build apk -t lib/startup/main_prod.dart --split-per-abi

#       # Upload output to artifacts
#       - name: Upload the APK files as build artifacts
#         uses: actions/upload-artifact@v2
#         with:
#           name: release-apk
#           path: |
#             app/build/app/outputs/flutter-apk/*

#       # - uses: actions/download-artifact@v2
#       #   with:
#       #     name: release-apk
#       #     path: app/release

#       # - name: Display structure of downloaded files
#       #   run: ls -R
#       #   working-directory: app/release

#       # Create a release with the APK files
#       - name: Generate a production release
#         uses: "marvinpinto/action-automatic-releases@latest"
#         with:
#           repo_token: "${{ secrets.GITHUB_TOKEN }}"
#           automatic_release_tag: "latest"
#           prerelease: false
#           files: app/build/app/outputs/flutter-apk/*
